# -*- coding: utf-8 -*-
"""sales_prediction on large data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pypIGiKpY0jyVxzXuIiLJBr4nkek3dgT
"""

import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor  # Corrected import statement
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

store_sales = pd. read_csv ("train.csv")
store_sales.head(10)

#check for null values
store_sales.info()

"""Dropping store and item columns bold text"""

store_sales = store_sales.drop(['store','item'], axis=1)

store_sales.info()

"""if the date is not in object then you comment it remove it
converting date from object to date time datatype
"""

store_sales ['date'] = pd.to_datetime(store_sales ['date'])

store_sales.info()

#converting date to a month period, and the sum the number of the item in each month
store_sales['date'] = store_sales['date'].dt.to_period("M")
monthly_sales = store_sales.groupby('date').sum().reset_index()

#convert the resulting date column to timestamp datatype
monthly_sales['date'] = monthly_sales['date'].dt.to_timestamp()

monthly_sales.head(10)

#visualization
plt.figure(figsize=(15,5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel("Date")
plt.ylabel("Sales")
plt.title("Monthly Customer Sales")

#call the difference on the sales columns to make the sales date stationaery
monthly_sales['sales_diff'] = monthly_sales['sales'].diff ()
monthly_sales = monthly_sales.dropna()
monthly_sales.head(10)

plt.figure(figsize=(15,5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel("Date")
plt.ylabel("Sales")
plt.title("monthly Customer difference")
plt.show()

# Dropping 'date' and 'sales' columns from the original dataframe
supervised_data = monthly_sales.drop(['date', 'sales'], axis=1)

# Preparing the supervised data
for i in range(1, 13):
    col_name = 'month_' + str(i)
    supervised_data[col_name] = supervised_data['sales_diff'].shift(i)

# Drop rows with NaN values generated by the shift operation and reset index
supervised_data = supervised_data.dropna().reset_index(drop=True)

# Display the first 10 rows of the resulting supervised_data dataframe
supervised_data.head(10)

#split the data into train and test
train_data = supervised_data[:-12]
test_data = supervised_data[-12:]
print("Train data shape",train_data.shape)
print("test data shape", test_data.shape)

scaler = MinMaxScaler(feature_range=(-1,1))
  scaler.fit(train_data)
  train_data = scaler.transform(train_data)
  test_data = scaler.transform(test_data)

x_train, y_train = train_data[:,1:], train_data[:,0:1]
x_test, y_test = test_data[:,1:], test_data[:,0:1]
y_train = y_train.ravel()
y_test = y_test.ravel()
print("x_train shape", x_train.shape)
print("y_train shape ", y_train.shape)
print("x_test shape", x_test.shape)
print("y_test shape", y_test.shape)

#make prediction data frame to merge the sale prices of all trained algs
sales_dates = monthly_sales['date'][-12:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

act_sales = monthly_sales['sales'][-13:].to_list()
print(act_sales)

#to create linear regression model, and predicted output
lr_model = LinearRegression()
lr_model.fit(x_train,y_train)
lr_pre = lr_model.predict(x_test)

lr_pre = lr_pre.reshape(-1,1)
#this is a  set matrix  - contains the input feature of the test data, and also the predicted output
lr_pre_test_set = np.concatenate([lr_pre, x_test], axis=1)
lr_pre_test_set = scaler.inverse_transform(lr_pre_test_set)

result_list = []

# Assuming you have a valid variable name, let's call it 'ir_pre_test_set'
for index in range(0, len(lr_pre_test_set)):
    result_list.append(lr_pre_test_set[index][0] + act_sales[index])

lr_pre_series = pd.Series(result_list, name="Linear Prediction")
predict_df = predict_df.merge(lr_pre_series, left_index=True, right_index=True)

lr_mse = np.sqrt(mean_absolute_error(predict_df['Linear Prediction'], monthly_sales['sales'][-12:]))
lr_mae = mean_absolute_error(predict_df['Linear Prediction'], monthly_sales['sales'][-12:])
lr_r2 = r2_score(predict_df['Linear Prediction'], monthly_sales['sales'][-12:])

print("Linear Regression MSE: ", lr_mse)
print("Linear Regression MAE: ", lr_mae)
print("Linear Regression R2: ", lr_r2)

"""**Visualization of the predciton against the actual sales**"""

plt.figure(figsize=(15,5))
#actual sales
plt.plot(monthly_sales['date'], monthly_sales['sales'])
#predicted sales
plt.plot(predict_df['date'], predict_df['Linear Prediction'])
plt.title("Cumstomer sales forcast using LR model")
plt.xlabel("date")
plt.ylabel("sales")
plt.legend(['actual Sales', 'Predicted Sales'])
plt.show()

#its optional


plt.figure(figsize=(15,5))

# Actual sales
plt.plot(monthly_sales['date'], monthly_sales['sales'])

# Predicted sales
plt.plot(predict_df['date'], predict_df['Linear Prediction'], marker='o', linestyle='-', color='r')

# Display numeric values for predicted sales
for i, txt in enumerate(predict_df['Linear Prediction']):
    plt.annotate(f'{txt:.2f}', (predict_df['date'].iloc[i], txt), textcoords="offset points", xytext=(0,10), ha='center')

plt.title("Customer Sales Forecast using LR model")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.legend(['Actual Sales', 'Predicted Sales'])
plt.show()

import joblib

# Save the linear regression model using joblib
joblib.dump(lr_model, 'linear_regression_model.txt')

import json
import numpy as np

# Extracting coefficients and intercept from the Linear Regression model
coefficients = lr_model.coef_.tolist()
intercept = lr_model.intercept_.tolist()

# Creating a dictionary to store the model information
model_info = {
    'coefficients': coefficients,
    'intercept': intercept
}

# Saving the model information to a JSON file
with open('linear_regression_model.json', 'w') as json_file:
    json.dump(model_info, json_file)

lr_pre_loaded = loaded_lr_model.predict(x_test)

# Reshape lr_pre_loaded to match the original shape
lr_pre_loaded = lr_pre_loaded.reshape(-1, 1)

# Concatenate predictions with the input features used for scaling
lr_pre_test_set_loaded = np.concatenate([lr_pre_loaded, x_test], axis=1)

# Inverse transform to get predictions in the original scale
lr_pre_test_set_loaded = scaler.inverse_transform(lr_pre_test_set_loaded)

# Extract only the predictions from the loaded data
loaded_predictions = lr_pre_test_set_loaded[:, 0]

# Display the readable predictions
print("Readable Predictions:", loaded_predictions)







